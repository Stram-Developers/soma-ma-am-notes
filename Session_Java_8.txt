File Handling
java.io
System.out and System.in are static reference variables 
defined in the java.lang.System class which refers to java.io.InputStream and java.io.PrintStream classes respectively.
 System.err which also refers java.io.PrintStream class.

Stream implies a source or a sink from which/to which the data flows.
In Java, we have 2 types of stream, byte stream and character stream.
Byte stream is represented by the abstract classes InputStream and OutputStream respectivly. They provide the abstract method
read() and write() respectively.

A FileInputStream obtains input bytes from a file in a file system. FileInputStream is meant for reading streams of raw bytes such as image data. 

FileOutputStream is meant for writing streams of raw bytes such as image data.

Example:
import java.io.*;

public class Main {
	public static void main(String[] args) throws IOException {
		FileOutputStream fos=new FileOutputStream("myfile.txt",true);
		fos.write(65);//'A'
		String str="java";
		fos.write(str.getBytes());		
		fos.close();
		
		FileInputStream fis = new FileInputStream("myfile.txt");
		int k = 0;
		k = fis.read();
		while (k != -1) {
			System.out.println((char)k);
			k = fis.read();
		}		
		fis.close();
	}
}

Character Stream has two main abstract classes: Reader and Writer used for reading from/writing to character streams.

FileReader is meant for reading streams of characters.
BufferedReader : Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters.

FileWriter is meant for writing streams of characters.

Example:
import java.io.*;
public class Main2 {
	public static void main(String[] args) throws IOException {
		FileWriter fw=new FileWriter("myfile.txt",true);
		String str="Java program on Files";
		fw.write(str);
		fw.write(System.lineSeparator());
		//On UNIX systems, it returns "\n"; 
		//on MicrosoftWindows systems it returns "\r\n".
		fw.close();
		
		FileReader fr=new FileReader("myfile.txt");
		BufferedReader br=new BufferedReader(fr);
		String s=br.readLine();
		while(s!= null) {
			System.out.println("Read: "+s);
			s=br.readLine();
		}
		   br.close();   
	}
}

How to accept user input?
a) Use java.util.Scanner class
b) Use java.io.InputStreamReader and java.io.BufferedReader combination.
An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset.

Example:
import java.io.*;
public class Main3 {

	public static void main(String[] args) throws IOException {
		InputStreamReader isr=new InputStreamReader(System.in);
		BufferedReader br=new BufferedReader(isr);
		String s=br.readLine();
		
		while(s!= null) {
			System.out.println("Read: "+s);
			s=br.readLine();
		}
	}
}

How to read a .properties file?** 
A properties file is used to write configuration information.
We use java.util.Properties class to read the .properties file.

Generally, these files are used to store static information in key and value pair separated by = sign. Things that you do not want to hard code in your Java code goes into properties files. The advantage of using properties file is we can configure things which are prone to change over a period of time without the need of changing anything in code. Properties file provide flexibility in terms of configuration.

Example:
import java.io.*;
import java.util.Properties;
public class Main4 {
	public static void main(String[] args) throws IOException {
		FileInputStream fis=new FileInputStream("database.properties");
		Properties props=new Properties();
		props.load(fis);
	System.out.println(props.getProperty("username"));
	System.out.println(props.getProperty("password"));
	System.out.println(props.getProperty("driver"));
	}
}

Thread basics
A thread is a light weight process. A process comprise of multiple threads.
In Java, we can create custom threads either by
a) extending the java.lang.Thread class
b) implementing the java.lang.Runnable interface.
The option (b) is preferred

When we create any Java program and try to execute it, the jvm creates the first thread known as main.
Thread.currentThread() | static method :: Returns a reference to the currently executing thread object.

The start() is called : Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread. 
The result is that two threads are running concurrently: thecurrent thread (which returns from the call to the start method) and the other thread (which executes its run method).

The start() method should not be called more than once using same thread reference. If tried, we get IllegalThreadStateException.

There are 4 main states of a thread
a) NEW
b) RUNNABLE
c) BLOCKED/WAITING
d) TERMINATED

Example:
public class Main5 {
	public static void main(String[] args) throws InterruptedException {
		System.out.println(
	Thread.currentThread().getName()+" begins....");
		
Runnable r=()->System.out.println(						Thread.currentThread().getName());
	
//It will use the stack of the main thread
		//r.run();
		
//The custom thread will have its own stack
		Thread th=new Thread(r);
		//th.setPriority(Thread.MAX_PRIORITY);//10
		th.join();
//The custom thread will make its creator (main thread) 
		//to wait for it to die.
		System.out.println("A| "+th.getState());
		th.start();	

		System.out.println("B| "+th.getState());
		System.out.println(Thread.currentThread().getName()+" continues...");
		
		System.out.println("C| "+th.getState());
		System.out.println(Thread.currentThread().getName()+" finishes...");
	}
}

The Thread.sleep(long milis) is a static method to make the thread go to blocked state for a given number of miliseconds.
Once the time is over, the thread becomes eligible to run (moves into RUNNABLE state). During the BLOCKED state, it does not release any resources held.




















