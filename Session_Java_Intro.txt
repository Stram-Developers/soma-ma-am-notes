Stage 1 ICT will be based on the module Java and JDBC.
Topics
Introduction to Java
Programming Fundamentals
Concept of String class and Array class
Class and Object | 4 main pillars of OOP
Inheritance, Interface and Abstract class
Collection Framework
Exception Handling
File Handling basics
Date API
Thread Basics
Annotations and Garbage Collection
Java 8| Lamdba Expressions, Stream API
JDBC
Design Principles 
	-SOLID
	-GOF patterns
Your CC for Core Java becomes active.
	Design Principles
	Data Structures (Hackerrank) (Student Handbook)
Your ICT becomes active

What is Java?
Java is platform independent oop language.

What makes Java platform independent?
The java source code (.java) when gets compiled using javac compiler generates bytecode. Because of this bytecode, the
Java language becomes platform indepenedent. Every machine has the jvm which will be able to understand the bytecode and 
transform it into machine code.

The JVM is platform DEPENDENT but the bytecode is platform INDEPENDENT.

The jdk or jre which we install on your machine is platform dependent.

What is the difference between JDK and JRE?
JRE is lighter than JDK.
JDK is used to create and run a Java Application.
JRE is used to run/execute a Java .class file(bytecode).

	JDK=JRE+APIs
JDK folder also has a JRE folder in it.
JRE/bin we get to see the java application launcher.
JDK/bin we also get to see the javac compiler to compile
Java scource code.

What is JVM?
It is a virtual machine environment provided by JRE.

Let us write our first ever Java program.
//prog.java**
class Demo{}
class Sample{
	static public void main(String[] ab){
		System.out.println("Hello friend");
	}
}

Points:
1. When we compile a Java source code that many number of .class
files will be created as class declarations are present.
2. If we donot provide any constructor, the javac compiler will
provide a default no argument constructor for us.
C:\Users\HP\Desktop\BatchesNow\ADM21JF036\MyJava>javap Demo
Compiled from "Prog.java"
class Demo {
  Demo();
}

3. The main() method is the entry point into the program.
C:\Users\HP\Desktop\BatchesNow\ADM21JF036\MyJava>java Demo
Error: Main method not found in class Demo, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application

4. **
static modifier implies that this method will be available even if there is no instance of the class.

An instance of the class means an object which is the real time 
implementation of the class.

class Dog (pedigree, height, weight, furcolor,...)
GoldenRetriever, Labrador,Pug | each one is the real time example
of the Dog class or entity.

class Car (manufacturer, mileage, comfort,...)
Kia, i20| real time implementations of the class Car

public is the access modifier which tells that this method will be acessible to everyone.

void means that this method will not return any value.

main() is just a method name.

String[] is an array of String elements; command line arguement.

System.out.println("Hello friend"); is used to print something.
Here java.lang.System is a class
out is a variable and println() is a method

The java.lang is a package which is present by default.
A package is a collection of classes and interfaces which provides some functionality.

import java.util.Date;
To print current Date I need an instance of Date class.
Hence to include Date class which is part of java.util package 
we will add the above line.

String[] is a String array. String is a universal data type.
for(int i=0;i<arr.length;i++)
	System.out.println(arr[i]);//ith position element in the array "arr".Here, arr.length shares the number of elements present in the array.

How to take user input?
java.util.Scanner class to accept user input.

import java.util.Scanner;
class Sample{
	//java application launcher calls this one
	static public void main(String[] ab){
		System.out.println("Hello friend tell me your name");
		Scanner scanner=new Scanner(System.in);
		String name=scanner.nextLine();
		System.out.println("Hello " +name);
	}	
}
/* java.util.* will include all the classes hence heavy
java.util.Scanner implies I only want the Scanner class */

We created an instance of the class Scanner
	Scanner scanner=new Scanner(System.in);

Class is a template which shares the common behaviour and attributes. An instance is the real time implementation of the class.

Scanner scanner;
Here scanner is a reference variable(envelope) which is of type
Scanner but has no address written on it currently.
The new keyword is responsible for memory allocation in the JVM
heap memory.
	scanner=new Scanner(System.in);
We did it here to associate the Scanner to standard input device
(keyboard).

System.in is a reference variable which is mapped to java.io.PrintStream class.

We can also use Scanner to read a File.

The Scanner class provides different methods to accept inputs of different types.

The java primitive data types (8)
byte(8), short(16), int(32) and long(64)
float(32), double(64)
char(16) -->Unicode charset
boolean --> true/false

String is a class which is part of java.lang package.
The nextXXX() method will be there for each pdt
nextBoolean() boolean
nextInt() int
nextFloat() float
* except for char

Looping styles in Java
-----------------------
for(int i=0;i<10;i++){
}

do{
	i++;
}while(i<5);

while(i<5){
	i++;
}

Example:
import java.util.Scanner;
class Sample{
	static public void main(String[] ab){
		int[] arr={1,5,2,3,6};
		//advanced for loop
		for(int k:arr){
			System.out.println(k);
		}
	}	
}	

Switch case example in Java
----------------------------
Also supports String data type
import java.util.Scanner;
class Sample{
	static public void main(String[] ab){
		String something="tone";
		switch(something){
			default:
				System.out.println("Invalid");
				break;
			case "one":
				System.out.println("One");
				break;
			case "three":
				System.out.println("Three");
				break;
			case "two":
				System.out.println("Two");
				break;
		}
	}	
}

Explore 
the array concept in Java
the different ways of defining a variable in Java
the concept of constructor in Java
how to call methods in Java 

We can declare an array in Java by writing any of the following
a) int[] arr=new int[size];
b) int[] arr={4,1,2,3,4};//array initializer block

In Java, an array can be of any primitive data type, wrapper type,String type as well as any user defined data type.

If you create an array using (a), it will automatically have
elements with default value based on that data type.

What is the use of wrapper type?
int has a wrapper type called Integer.
I cannot convert String to int and vice versa.
	String -->Integer -->int

The wrapper class makes the pdt more powerful with its methods
When the value type is converted to reference type it is known
as boxing. When the reference type is converted to value type,
it is known as unboxing.
	char -->Character
	boolean -->Boolean
	float -->Float
	int -->Integer

Example:
import java.util.Scanner;
class Sample{
	static public void main(String[] ab){
		String s="5";
		//int num=s;//compile time error
		int num=Integer.parseInt(s);
		int x=21;
		//String t=x;//error
		String t=Integer.toString(x);	
	}	
}

We also have a java.util.Arrays class with a bag of utility methods.

Example:
import java.util.Arrays;
class Sample{
	static public void main(String[] ab){
	String[] arr={"abcd","ac","abbc","acbc","ad","aad","adac"};

		Arrays.sort(arr);//dual pivot quick sort algo 
		for(String s:arr)
		System.out.println(s);

		Arrays.fill(arr,2,5,"xyz");
		System.out.println(Arrays.toString(arr));
	}	
}

We can define as
a) static or class variable
b) instance variable
c) local variable

A change in the static variable value will be affecting all the instances. A change in the instance variable value is specific to an instance.

Example:
class Demo{
	String abc="one";//instance
	static String xyz="two";//static
	void someMethod(){
		String pqr="three";//local
	}
}
class Sample{	
	static public void main(String[] ab){		
		Demo de=new Demo();//instance
		Demo de1=new Demo();//instance
		de.abc="JF036 abc";
		de.xyz="JF036 xyz";

		System.out.println(Demo.xyz);//static 

		System.out.println(de.xyz);//JF036 xyz
		System.out.println(de.abc);//JF036 abc

		System.out.println(de1.xyz);//JF036 xyz
		System.out.println(de1.abc);//one

		//System.out.println(de.pqr);//not visible
	}	
}

What is the constructor? A special method which has the same name
as that of the class. It is used to initialize the instance variables to some non default values.
If we donot provide a constructor, the compiler adds a default no arg constructor.
If we add a constructor, the compiler does not any longer add any constructor.

A constructor does not have any return type defined in it.
It is recommended to add a default no arg constructor whenever you add a constructor with parameters.

Example: 
class Person{
	String name;
	int age;
	Person(String name,int age){
		this.name=name;
		this.age=age;
	}
	Person(){
		this.name="Guest";
		this.age=5;
	}
	void print(){
	System.out.println(name+ " is "+age+" years old.");
	}
}

class Sample{	
	static public void main(String[] ab){		
		Person p1=new Person("Aman",20);
		Person p2=new Person();
		p1.print();
		p2.print();
	}	
}

TBD
String class and its methods
Handle user defined array of objects
Concept of getters and setters
Access modifiers








	



































