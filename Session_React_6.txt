React Application integrating with the Web service in the backend.
React application will not have any database layer. It just exposes the UI.

How can react consume the json data from a web service?
There are several ways like Fetch API, Axios
The Fetch API through the fetch() method allows us to make an HTTP request to the backend. With this method, we can perform different types of operations using HTTP methods like the GET method to request data from an endpoint, POST to send data to an endpoint, and more.

You should populate data with AJAX calls in the componentDidMount lifecycle method. This is so you can use setState to update your component when the data is retrieved.

Add a new component to your react project.
import React,{Component} from 'react'
export default class CompOne extends Component{

	constructor(props){
		super(props);
		this.state = {
     			data: [],
     			name:'',
      			companyName:'' ,
     			website:'',
     			email:''
    		}		
	  this.handleChange=this.handleChange.bind(this);
    	  this.save=this.save.bind(this);
  	}

  handleChange(e){     
      this.setState({[e.target.name]:e.target.value})
  }

componentDidMount() {
    fetch('https://jsonplaceholder.typicode.com/users').then(
        (response) => response.json()
    ).then(data => this.setState({data: data}))
}

	render(){
		return(<>
		<h3>Available API users data</h3>
    		{this.state.data.map(d=> 
    		<details key={d.id}>
       		<summary >{d.name}</summary>    
        	<span>Email: {d.email}</span> <br/>
        	<span>Website: {d.website}</span> 
		<span>Company Name:{d.company.name}</span>   
    		</details>
    )}		


		 <h3>Add new API user data</h3>       
  
  <span>{this.state.name} {this.state.companyName} {this.state.email}</span>
       <br/>
 Name: <input type="text" name="name" onChange={this.handleChange}/><br/>
 Company: <input type="text" name="companyName" onChange={this.handleChange}/><br/>
 Email: <input type="text" name="email" onChange={this.handleChange}/><br/>
     <br/><button onClick={this.save}>Save</button>
        
		</>);
	}

save(e){
        e.preventDefault();
        let userRef={
            id: 11,
            name:this.state.name,               
            email:this.state.email,            
            company: {
              name: this.state.companyName
            }
        }
     fetch('https://jsonplaceholder.typicode.com/users', {
        method: 'POST',
        body: JSON.stringify(userRef),
    headers: {
    'Content-type': 'application/json; charset=UTF-8',
    },
})
  .then((response) => response.json())
  .then((json) => console.log(json));
    }


}

App.js/index.js
<CompOne/>

HTTP VERBS
GET : fetch one or more rows
POST: create new resource (row)
PUT: update a resource
DELETE: remove a resource

FYR:https://jsonplaceholder.typicode.com/guide/

** React-Routing





